// Code generated by MockGen. DO NOT EDIT.
// Source: orchestrator/internal/services/expression_task_service.go
//
// Generated by this command:
//
//	mockgen -source=orchestrator/internal/services/expression_task_service.go -destination=orchestrator/mocks/expression_task_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/alexGoLyceum/calculator-service/orchestrator/internal/models"
	proto "github.com/alexGoLyceum/calculator-service/orchestrator/internal/transport/grpc/proto"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MockExpressionTaskService is a mock of ExpressionTaskService interface.
type MockExpressionTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockExpressionTaskServiceMockRecorder
	isgomock struct{}
}

// MockExpressionTaskServiceMockRecorder is the mock recorder for MockExpressionTaskService.
type MockExpressionTaskServiceMockRecorder struct {
	mock *MockExpressionTaskService
}

// NewMockExpressionTaskService creates a new mock instance.
func NewMockExpressionTaskService(ctrl *gomock.Controller) *MockExpressionTaskService {
	mock := &MockExpressionTaskService{ctrl: ctrl}
	mock.recorder = &MockExpressionTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpressionTaskService) EXPECT() *MockExpressionTaskServiceMockRecorder {
	return m.recorder
}

// CreateExpressionTask mocks base method.
func (m *MockExpressionTaskService) CreateExpressionTask(ctx context.Context, userID uuid.UUID, expression string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpressionTask", ctx, userID, expression)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpressionTask indicates an expected call of CreateExpressionTask.
func (mr *MockExpressionTaskServiceMockRecorder) CreateExpressionTask(ctx, userID, expression any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpressionTask", reflect.TypeOf((*MockExpressionTaskService)(nil).CreateExpressionTask), ctx, userID, expression)
}

// GetAllExpressions mocks base method.
func (m *MockExpressionTaskService) GetAllExpressions(ctx context.Context, userID uuid.UUID) ([]*models.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExpressions", ctx, userID)
	ret0, _ := ret[0].([]*models.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllExpressions indicates an expected call of GetAllExpressions.
func (mr *MockExpressionTaskServiceMockRecorder) GetAllExpressions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExpressions", reflect.TypeOf((*MockExpressionTaskService)(nil).GetAllExpressions), ctx, userID)
}

// GetExpressionById mocks base method.
func (m *MockExpressionTaskService) GetExpressionById(ctx context.Context, expression uuid.UUID) (*models.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpressionById", ctx, expression)
	ret0, _ := ret[0].(*models.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpressionById indicates an expected call of GetExpressionById.
func (mr *MockExpressionTaskServiceMockRecorder) GetExpressionById(ctx, expression any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpressionById", reflect.TypeOf((*MockExpressionTaskService)(nil).GetExpressionById), ctx, expression)
}

// GetOperationEndTime mocks base method.
func (m *MockExpressionTaskService) GetOperationEndTime(operator string) *timestamppb.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationEndTime", operator)
	ret0, _ := ret[0].(*timestamppb.Timestamp)
	return ret0
}

// GetOperationEndTime indicates an expected call of GetOperationEndTime.
func (mr *MockExpressionTaskServiceMockRecorder) GetOperationEndTime(operator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationEndTime", reflect.TypeOf((*MockExpressionTaskService)(nil).GetOperationEndTime), operator)
}

// GetTask mocks base method.
func (m *MockExpressionTaskService) GetTask(ctx context.Context) (*proto.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx)
	ret0, _ := ret[0].(*proto.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockExpressionTaskServiceMockRecorder) GetTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockExpressionTaskService)(nil).GetTask), ctx)
}

// SetTaskResult mocks base method.
func (m *MockExpressionTaskService) SetTaskResult(ctx context.Context, task *proto.Task, result float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskResult", ctx, task, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTaskResult indicates an expected call of SetTaskResult.
func (mr *MockExpressionTaskServiceMockRecorder) SetTaskResult(ctx, task, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskResult", reflect.TypeOf((*MockExpressionTaskService)(nil).SetTaskResult), ctx, task, result)
}

// StartExpiredTaskReset mocks base method.
func (m *MockExpressionTaskService) StartExpiredTaskReset(ctx context.Context, interval, delay time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartExpiredTaskReset", ctx, interval, delay)
}

// StartExpiredTaskReset indicates an expected call of StartExpiredTaskReset.
func (mr *MockExpressionTaskServiceMockRecorder) StartExpiredTaskReset(ctx, interval, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExpiredTaskReset", reflect.TypeOf((*MockExpressionTaskService)(nil).StartExpiredTaskReset), ctx, interval, delay)
}
