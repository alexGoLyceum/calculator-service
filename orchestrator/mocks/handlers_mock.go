// Code generated by MockGen. DO NOT EDIT.
// Source: orchestrator/internal/transport/http/handlers/handlers.go
//
// Generated by this command:
//
//	mockgen -source=orchestrator/internal/transport/http/handlers/handlers.go -destination=orchestrator/mocks/handlers_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Calculate mocks base method.
func (m *MockHandler) Calculate(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Calculate indicates an expected call of Calculate.
func (mr *MockHandlerMockRecorder) Calculate(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockHandler)(nil).Calculate), c)
}

// GetExpressionByID mocks base method.
func (m *MockHandler) GetExpressionByID(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpressionByID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetExpressionByID indicates an expected call of GetExpressionByID.
func (mr *MockHandlerMockRecorder) GetExpressionByID(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpressionByID", reflect.TypeOf((*MockHandler)(nil).GetExpressionByID), c)
}

// GetExpressions mocks base method.
func (m *MockHandler) GetExpressions(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpressions", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetExpressions indicates an expected call of GetExpressions.
func (mr *MockHandlerMockRecorder) GetExpressions(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpressions", reflect.TypeOf((*MockHandler)(nil).GetExpressions), c)
}

// Login mocks base method.
func (m *MockHandler) Login(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockHandlerMockRecorder) Login(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockHandler)(nil).Login), c)
}

// Ping mocks base method.
func (m *MockHandler) Ping(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockHandlerMockRecorder) Ping(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHandler)(nil).Ping), c)
}

// Register mocks base method.
func (m *MockHandler) Register(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockHandlerMockRecorder) Register(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockHandler)(nil).Register), c)
}
