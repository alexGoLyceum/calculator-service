// Code generated by MockGen. DO NOT EDIT.
// Source: orchestrator/internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=orchestrator/internal/repository/repository.go -destination=orchestrator/mocks/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	postgres "github.com/alexGoLyceum/calculator-service/orchestrator/internal/database/postgres"
	models "github.com/alexGoLyceum/calculator-service/orchestrator/internal/models"
	proto "github.com/alexGoLyceum/calculator-service/orchestrator/internal/transport/grpc/proto"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockRepository) AuthUser(ctx context.Context, login, password string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, login, password)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockRepositoryMockRecorder) AuthUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockRepository)(nil).AuthUser), ctx, login, password)
}

// CreateExpressionTask mocks base method.
func (m *MockRepository) CreateExpressionTask(ctx context.Context, expression *models.Expression, tasks []*models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpressionTask", ctx, expression, tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExpressionTask indicates an expected call of CreateExpressionTask.
func (mr *MockRepositoryMockRecorder) CreateExpressionTask(ctx, expression, tasks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpressionTask", reflect.TypeOf((*MockRepository)(nil).CreateExpressionTask), ctx, expression, tasks)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, login, password string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, password)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, login, password)
}

// GetAllExpressions mocks base method.
func (m *MockRepository) GetAllExpressions(ctx context.Context, userID uuid.UUID) ([]*models.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExpressions", ctx, userID)
	ret0, _ := ret[0].([]*models.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllExpressions indicates an expected call of GetAllExpressions.
func (mr *MockRepositoryMockRecorder) GetAllExpressions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExpressions", reflect.TypeOf((*MockRepository)(nil).GetAllExpressions), ctx, userID)
}

// GetExpressionByID mocks base method.
func (m *MockRepository) GetExpressionByID(ctx context.Context, id uuid.UUID) (*models.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpressionByID", ctx, id)
	ret0, _ := ret[0].(*models.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpressionByID indicates an expected call of GetExpressionByID.
func (mr *MockRepositoryMockRecorder) GetExpressionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpressionByID", reflect.TypeOf((*MockRepository)(nil).GetExpressionByID), ctx, id)
}

// GetTask mocks base method.
func (m *MockRepository) GetTask(ctx context.Context, getEndTime func(string) *timestamppb.Timestamp) (*proto.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, getEndTime)
	ret0, _ := ret[0].(*proto.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockRepositoryMockRecorder) GetTask(ctx, getEndTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockRepository)(nil).GetTask), ctx, getEndTime)
}

// ResetExpiredTasks mocks base method.
func (m *MockRepository) ResetExpiredTasks(ctx context.Context, delay time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetExpiredTasks", ctx, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetExpiredTasks indicates an expected call of ResetExpiredTasks.
func (mr *MockRepositoryMockRecorder) ResetExpiredTasks(ctx, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetExpiredTasks", reflect.TypeOf((*MockRepository)(nil).ResetExpiredTasks), ctx, delay)
}

// SetTaskResult mocks base method.
func (m *MockRepository) SetTaskResult(ctx context.Context, task *proto.Task, result float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskResult", ctx, task, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTaskResult indicates an expected call of SetTaskResult.
func (mr *MockRepositoryMockRecorder) SetTaskResult(ctx, task, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskResult", reflect.TypeOf((*MockRepository)(nil).SetTaskResult), ctx, task, result)
}

// WithTransaction mocks base method.
func (m *MockRepository) WithTransaction(ctx context.Context, fn func(context.Context, postgres.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockRepositoryMockRecorder) WithTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockRepository)(nil).WithTransaction), ctx, fn)
}
