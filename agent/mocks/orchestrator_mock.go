// Code generated by MockGen. DO NOT EDIT.
// Source: agent/internal/proto/orchestrator_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=agent/internal/proto/orchestrator_grpc.pb.go -destination=agent/mocks/orchestrator_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/alexGoLyceum/calculator-service/agent/internal/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockOrchestratorServiceClient is a mock of OrchestratorServiceClient interface.
type MockOrchestratorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorServiceClientMockRecorder
	isgomock struct{}
}

// MockOrchestratorServiceClientMockRecorder is the mock recorder for MockOrchestratorServiceClient.
type MockOrchestratorServiceClientMockRecorder struct {
	mock *MockOrchestratorServiceClient
}

// NewMockOrchestratorServiceClient creates a new mock instance.
func NewMockOrchestratorServiceClient(ctrl *gomock.Controller) *MockOrchestratorServiceClient {
	mock := &MockOrchestratorServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrchestratorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestratorServiceClient) EXPECT() *MockOrchestratorServiceClientMockRecorder {
	return m.recorder
}

// AssignTasks mocks base method.
func (m *MockOrchestratorServiceClient) AssignTasks(ctx context.Context, in *proto.AssignTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.Task], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignTasks", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[proto.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTasks indicates an expected call of AssignTasks.
func (mr *MockOrchestratorServiceClientMockRecorder) AssignTasks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTasks", reflect.TypeOf((*MockOrchestratorServiceClient)(nil).AssignTasks), varargs...)
}

// SubmitTask mocks base method.
func (m *MockOrchestratorServiceClient) SubmitTask(ctx context.Context, in *proto.SubmitTaskRequest, opts ...grpc.CallOption) (*proto.SubmitTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitTask", varargs...)
	ret0, _ := ret[0].(*proto.SubmitTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTask indicates an expected call of SubmitTask.
func (mr *MockOrchestratorServiceClientMockRecorder) SubmitTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTask", reflect.TypeOf((*MockOrchestratorServiceClient)(nil).SubmitTask), varargs...)
}

// MockOrchestratorServiceServer is a mock of OrchestratorServiceServer interface.
type MockOrchestratorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorServiceServerMockRecorder
	isgomock struct{}
}

// MockOrchestratorServiceServerMockRecorder is the mock recorder for MockOrchestratorServiceServer.
type MockOrchestratorServiceServerMockRecorder struct {
	mock *MockOrchestratorServiceServer
}

// NewMockOrchestratorServiceServer creates a new mock instance.
func NewMockOrchestratorServiceServer(ctrl *gomock.Controller) *MockOrchestratorServiceServer {
	mock := &MockOrchestratorServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrchestratorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestratorServiceServer) EXPECT() *MockOrchestratorServiceServerMockRecorder {
	return m.recorder
}

// AssignTasks mocks base method.
func (m *MockOrchestratorServiceServer) AssignTasks(arg0 *proto.AssignTasksRequest, arg1 grpc.ServerStreamingServer[proto.Task]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTasks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignTasks indicates an expected call of AssignTasks.
func (mr *MockOrchestratorServiceServerMockRecorder) AssignTasks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTasks", reflect.TypeOf((*MockOrchestratorServiceServer)(nil).AssignTasks), arg0, arg1)
}

// SubmitTask mocks base method.
func (m *MockOrchestratorServiceServer) SubmitTask(arg0 context.Context, arg1 *proto.SubmitTaskRequest) (*proto.SubmitTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTask", arg0, arg1)
	ret0, _ := ret[0].(*proto.SubmitTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTask indicates an expected call of SubmitTask.
func (mr *MockOrchestratorServiceServerMockRecorder) SubmitTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTask", reflect.TypeOf((*MockOrchestratorServiceServer)(nil).SubmitTask), arg0, arg1)
}

// mustEmbedUnimplementedOrchestratorServiceServer mocks base method.
func (m *MockOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrchestratorServiceServer")
}

// mustEmbedUnimplementedOrchestratorServiceServer indicates an expected call of mustEmbedUnimplementedOrchestratorServiceServer.
func (mr *MockOrchestratorServiceServerMockRecorder) mustEmbedUnimplementedOrchestratorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrchestratorServiceServer", reflect.TypeOf((*MockOrchestratorServiceServer)(nil).mustEmbedUnimplementedOrchestratorServiceServer))
}

// MockUnsafeOrchestratorServiceServer is a mock of UnsafeOrchestratorServiceServer interface.
type MockUnsafeOrchestratorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrchestratorServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeOrchestratorServiceServerMockRecorder is the mock recorder for MockUnsafeOrchestratorServiceServer.
type MockUnsafeOrchestratorServiceServerMockRecorder struct {
	mock *MockUnsafeOrchestratorServiceServer
}

// NewMockUnsafeOrchestratorServiceServer creates a new mock instance.
func NewMockUnsafeOrchestratorServiceServer(ctrl *gomock.Controller) *MockUnsafeOrchestratorServiceServer {
	mock := &MockUnsafeOrchestratorServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrchestratorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrchestratorServiceServer) EXPECT() *MockUnsafeOrchestratorServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrchestratorServiceServer mocks base method.
func (m *MockUnsafeOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrchestratorServiceServer")
}

// mustEmbedUnimplementedOrchestratorServiceServer indicates an expected call of mustEmbedUnimplementedOrchestratorServiceServer.
func (mr *MockUnsafeOrchestratorServiceServerMockRecorder) mustEmbedUnimplementedOrchestratorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrchestratorServiceServer", reflect.TypeOf((*MockUnsafeOrchestratorServiceServer)(nil).mustEmbedUnimplementedOrchestratorServiceServer))
}
