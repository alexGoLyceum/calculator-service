// Code generated by MockGen. DO NOT EDIT.
// Source: agent/internal/client/client.go
//
// Generated by this command:
//
//	mockgen -source=agent/internal/client/client.go -destination=agent/mocks/client_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tasks "github.com/alexGoLyceum/calculator-service/agent/internal/tasks"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// SetTaskResult mocks base method.
func (m *MockClient) SetTaskResult(ctx context.Context, task tasks.Task, result float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskResult", ctx, task, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTaskResult indicates an expected call of SetTaskResult.
func (mr *MockClientMockRecorder) SetTaskResult(ctx, task, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskResult", reflect.TypeOf((*MockClient)(nil).SetTaskResult), ctx, task, result)
}

// StreamTasks mocks base method.
func (m *MockClient) StreamTasks(ctx context.Context, handler func(*tasks.Task) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamTasks", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamTasks indicates an expected call of StreamTasks.
func (mr *MockClientMockRecorder) StreamTasks(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamTasks", reflect.TypeOf((*MockClient)(nil).StreamTasks), ctx, handler)
}
